<h2>Install</h2>
<p>
	Dagger has a <abbr title="Command Line Interface">CLI</abbr> scaffolding tool to help you create and build
	your projects which can be found in the <abbr title="Node Package Manager">NPM</abbr> repository.
</p>

{{#highlight "bash"}}
$ npm install -g dagger-cli
# Optional, install the bash completion scripts
$ dagger completion install
{{/highlight}}

<p>
	If you don't want to use the scaffolding tool, you can also install Dagger directly in your project directory, but
	it is highly recommended to use the scaffolding tool.
</p>

{{#highlight "bash"}}
$ npm install --save dagger.js
{{/highlight}}

<h3>Using The Scaffolding Tool</h3>
<p>
	Using the scaffolding tool is very easy and straight-forward. To begin with, you will need a directory to
	work in.
</p>

{{#highlight "bash"}}
$ mkdir my-project
$ cd my-project
{{/highlight}}

<p>
	From here, we can use the scaffold to initialize all of the basics of a Dagger application.
</p>

{{#highlight "bash"}}
$ dagger init --deps
{{/highlight}}

<p>
	The <code>init</code> command tells the tool to create all the basic directories and files needed for
	a Dagger application, such as the <code>package.json</code> file, the main <code>app.js</code> file,
	and the <code>models</code> and <code>endpoints</code> directories. Adding the <code>--deps</code>
	flag tells it to also call to npm to install the project dependencies. Now we can create our first endpoint.
</p>

{{#highlight "bash"}}
$ dagger create endpoint hello --method get
{{/highlight}}

<p>
	This will create a new file <code>endpoints/hello.js</code> with a basic endpoint that responds to the
	<code>GET</code> method. It should look something like this:
</p>

{{#highlight "javascript"}}
var Endpoint   = require('dagger.js/lib/endpoint');
var HttpError  = require('dagger.js/lib/http-meta').HttpError;

var HelloEndpoint = module.exports = new Endpoint({

	route: '/hello',
	
	//
	// GET /hello
	//
	"get": function(req) {
		(new HttpError(405, 'Endpoint not configured')).send(req);
	}
	
});
{{/highlight}}

<h4>Creating Models</h4>
<p>
	Now, let's create a model and an endpoint to access that model.
</p>

{{#highlight "bash"}}
$ dagger create model person --fields name,email
{{/highlight}}

<p>
	This will result in the file <code>models/person.js</code> that looks something like this:
</p>

{{#highlight "javascript"}}
var models = require('dagger.js/lib/models');


// 
// Define the Person schema
// 
// There is no need to create the actual model here (eg. `mongoose.model('Person', PersonSchema)`)
// as that is handled automatically by dagger's model module.
// 
var PersonSchema = module.exports = new models.Schema({
	name: { type: String },
	email: { type: String }
});
{{/highlight}}










