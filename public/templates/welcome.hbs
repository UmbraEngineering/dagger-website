<p>
	Dagger.js is a new RESTful API framework for Node.js packed full of power, built on top of known
	and trusted libraries like <a href="http://expressjs.com">Express</a>, <a href="http://socket.io">
	Socket.IO</a>, and <a href="http://mongoosejs.com/">Mongoose</a>.
</p>



<h2>Mongoose Models with Added Extras</h2>
<p>
	Dagger.js models use mongoose under the hood, but has extended it for ease of use and added
	some extra features.
</p>

{{#highlight "javascript"}}
var models = require('dagger.js/lib/models');

var Email     = models.types.Email;
var ObjectId  = models.types.ObjectId;

//
// Define a new Person schema
//
var PersonSchema = module.exports = {
	name: String,
	email: {type: Email, index: {unique: true}},
	gender: {type: String, enum: ['male', 'female', 'other', 'undisclosed']},
	children: [{type: ObjectId, ref: 'person'}]
};
{{/highlight}}



<h2>Easy-to-use Endpoints</h2>
<p>
	The built-in endpoint class is very easy to use.
</p>

{{#highlight "javascript"}}
var Endpoint = require('dagger.js/lib/endpoint');

//
// Define the new endpoint
//
var PeopleEndpoint = module.exports = Endpoint.create({

	route: '/people',

	'get': function(req) {
		req.respond(200, 'Hello World!');
	},

	'get /:id': function(req) {
		req.respond(200, You attempted to fetch ' + req.params.id);
	},

	'post': function(req) {
		req.respond(405, 'We don't support POSTs on this endpoint');
	},

	'put|patch': function(req) {
		req.respond(200, 'We handle PUT and PATCH requests with the same code');
	},

	'del': function(req) {
		req.respond(200, 'No! D: Don't delete me! :(');
	}

});
{{/highlight}}

<h3>Schema Endpoints</h3>
<p>
	Auto-generated endpoints will automatically create schema endpoints for you models so your API will
	document itself.
</p>

{{#highlight "http"}}
GET http://example.com/people/schema HTTP/1.1
{{/highlight}}

{{#highlight "http"}}
HTTP/1.1 200 OK
Content-Type: application/json

{
	"_id": {
		"type": "ObjectId",
		"auto": true
	},
	"name": {
		"type": "String"
	},
	"email": {
		"type": "Email",
		"unique": true
	},
	"gender": {
		"type": "String",
		"enum": ["Male", "Female", "Other", "Undisclosed"]
	},
	"children": {
		"type": "[ObjectId]",
		"ref": "Person"
	}
}
{{/highlight}}

<h3>Filters and Populates</h3>
<p>
	You can pass in mongodb style filter queries to your model endpoints, as well as specifying fields to
	be populated when querying.
</p>

{{#highlight "http"}}
GET http://example.com/people?filter={"gender":"Male"}&amp;populate=children HTTP/1.1
{{/highlight}}

{{#highlight "http"}}
HTTP/1.1 200 OK
Content-Type: application/json

[{
	"_id": "...",
	"name": "Bob",
	"email": "bob@example.com",
	"gender": "Male",
	"children": [{
		"_id": "..."
		"name": "Sally",
		"email": "sally@example.com",
		"gender": "Female",
		"children": []
	}]
}]
{{/highlight}}

<h3>Bulk Updates and Deletes</h3>
<p>
	Model endpoints also support bulk updates and deletes so you can design you code to be more efficient.
</p>

{{#highlight "http"}}
PATCH http://example.com/people HTTP/1.1
Content-Type: application/json

[
	{"_id":"...","name":"Bob"},
	{"_id":"...","name":"Sally"}
]
{{/highlight}}

{{#highlight "http"}}
HTTP/1.1 200 OK
Content-Type: application/json

[{
	"_id": "...",
	"name": "Bob",
	"email": "bob@example.com",
	"gender": "Male",
	"children": ["..."]
}, {
	"_id": "...",
	"name": "Sally",
	"email": "sally@example.com",
	"gender": "Female",
	"children": []
}]
{{/highlight}}



<h2>Socket.IO Out of the Box</h2>
<p>
	Socket.IO is deeply integrated into Dagger.js; Any request that you can make with a REST endpoint
	can also be done through a websocket.
</p>

{{#highlight "javascript"}}
var socket = io.connect('http://example.com');

// Using the socket.io client to make requests
socket.emit('request', {method: 'get', url: '/people?filter={"name":"Bob"}'}, function(res) {
	var bob = res.body;
});
{{/highlight}}

<p>
	You can also use Socket.IO to create push-based applications in Dagger.js by having the client listen
	for events on specific models:
</p>

{{#highlight "javascript"}}
var socket = io.connect('http://example.com');

// Using socket.io client to listen for events on the server
socket.emit('listen', {model: 'person', event: 'create', filter: {gender: 'female'}}, function(res) {
	socket.on(res.emits, function(person) {
		console.log('A new person with gender "female" was created on the server.');
	});
});
{{/highlight}}
