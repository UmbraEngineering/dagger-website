<p>
	Dagger.js is a new RESTful API framework for Node.js packed full of power, built on top of known
	and trusted libraries like <a href="http://expressjs.com">Express</a>, <a href="http://socket.io">
	Socket.IO</a>, and <a href="http://mongoosejs.com/">Mongoose</a>.
</p>



<h2>Mongoose Models with Added Extras</h2>
<p>
	Dagger.js models use mongoose under the hood, but has extended it for ease of use and added
	some extra features.
</p>

{{#highlight "javascript"}}
var Model = require('dagger.js').require('model');

// Define a new Person model
var Person = module.exports = Model.create('Person', {
	
	route: 'people',

	schema: {
		name: String,
		email: {type: Model.Types.Email, index: {unique: true}},
		gender: {type: String, enum: ['Male', 'Female', 'Other', 'Undisclosed']},
		children: [{type: Model.Types.ObjectId, ref: 'Person'}]
	}

});
{{/highlight}}



<h2>Auto-Generated Endpoints</h2>
<p>
	Dagger.js automatically creates REST endpoints for your models, so you don't have to. These
	endpoints come with all of the basics expected of a REST API, as well as a few extras like
	<code>/model/schema</code> endpoints that describe the model schema, built-in <code>filter</code>
	and <code>populate</code> query params, and bulk <code>PUT</code>, <code>PATCH</code>, and
	<code>DELETE</code> operations.
</p>

<h3>Schema Endpoints</h3>

{{#highlight "http"}}
GET http://example.com/people/schema HTTP/1.1
{{/highlight}}

{{#highlight "http"}}
HTTP/1.1 200 OK
Content-Type: application/json

{
	"_id": {
		"type": "ObjectId",
		"auto": true
	},
	"name": {
		"type": "String"
	},
	"email": {
		"type": "Email",
		"unique": true
	},
	"gender": {
		"type": "String",
		"enum": ["Male", "Female", "Other", "Undisclosed"]
	},
	"children": {
		"type": "[ObjectId]",
		"ref": "Person"
	}
}
{{/highlight}}

<h3>Filters and Populates</h3>

{{#highlight "http"}}
GET http://example.com/people?filter={"gender":"Male"}&amp;populate=children HTTP/1.1
{{/highlight}}

{{#highlight "http"}}
HTTP/1.1 200 OK
Content-Type: application/json

[{
	"_id": "...",
	"name": "Bob",
	"email": "bob@example.com",
	"gender": "Male",
	"children": [{
		"_id": "..."
		"name": "Sally",
		"email": "sally@example.com",
		"gender": "Female",
		"children": []
	}]
}]
{{/highlight}}

<h3>Bulk Updates and Deletes</h3>

{{#highlight "http"}}
PATCH http://example.com/people HTTP/1.1
Content-Type: application/json

[
	{"_id":"...","name":"Bob"},
	{"_id":"...","name":"Sally"}
]
{{/highlight}}

{{#highlight "http"}}
HTTP/1.1 200 OK
Content-Type: application/json

[{
	"_id": "...",
	"name": "Bob",
	"email": "bob@example.com",
	"gender": "Male",
	"children": ["..."]
}, {
	"_id": "...",
	"name": "Sally",
	"email": "sally@example.com",
	"gender": "Female",
	"children": []
}]
{{/highlight}}



<h2>Socket.IO Out of the Box</h2>
<p>
	Socket.IO is deeply integrated into Dagger.js; Any request that you can make with a REST endpoint
	can also be done through a websocket.
</p>

{{#highlight "javascript"}}
// Using the socket.io client to make requests
var socket = io.connect('http://example.com');
socket.emit('get', {url: '/people?filter={"name":"Bob"}'}, function(res) {
	var bob = res.body;
});
{{/highlight}}



<h2>Built-in Authentication and Authorization System</h2>
<p>
	Token based authentication comes built-in using the supplied <code>AuthToken</code> model and
	<code>/auth-tokens</code> endpoint. Users authenticate by sending a <code>POST</code> request to
	<code>/auth-tokens</code> with their authentication credentials.
</p>

{{#highlight "http"}}
POST http://example.com/auth-tokens HTTP/1.1
Content-Type: application/json

{
	"username": "bob",
	"password": "bobsSecretPassword"
}
{{/highlight}}

<p>
	The user then gets back an auth token.
</p>

{{#highlight "http"}}
HTTP/1.1 201 CREATED
Content-Type: application/json

{
	"token": "...",
	"user": "...",
	"expires": 1387432837389
}
{{/highlight}}

<p>
	This auth token can now be used to authenticate future requests by sending it in an
	<code>Auth-Token</code> header.
</p>

{{#highlight "http"}}
GET http://example.com/people HTTP/1.1
Auth-Token: ...
{{/highlight}}

<p>
	Dagger.js also has built-in models for handling roles and permissions so that you can build
	permission based authorization into your API.
</p>
