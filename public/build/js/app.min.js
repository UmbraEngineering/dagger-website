require._modules["/templates.js"]=function(){var a="/templates.js",b="/",c={loaded:!1,exports:{},filename:a,dirname:b,require:null,call:function(){c.loaded=!0,c.call=function(){},f()},parent:null,children:[]},d=c.require=window.require._bind(c),e=c.exports,f=function(){var a="undefined"==typeof window?global:window,b=a.Handlebars||d("handlebars");this.exports=this.exports||{},this.exports.footer=b.template(function(a,b,c,d,e){return this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,a.helpers),e=e||{},'<footer>\n	<p>\n		Copyright &copy; 2014 <a href="http://www.umbraengineering.com">Umbra Engineering LLC</a>\n	</p>\n	<p>\n		Dagger.js is dual licensed under MIT and GPL\n	</p>\n</footer>'}),this.exports["get-started"]=b.template(function(a,b,c,d,e){function f(){return"\n$ npm install -g dagger-cli\n# Optional, install the bash completion scripts\n$ dagger completion install\n"}function g(){return"\n$ npm install --save dagger.js\n"}function h(){return"\n$ mkdir my-project\n$ cd my-project\n"}function i(){return"\n$ dagger init --deps\n"}function j(){return"\n$ dagger create endpoint hello --method get\n"}function k(){return"\nvar Endpoint   = require('dagger.js/lib/endpoint');\nvar HttpError  = require('dagger.js/lib/http-meta').HttpError;\n\nvar HelloEndpoint = module.exports = new Endpoint({\n\n	route: '/hello',\n	\n	//\n	// GET /hello\n	//\n	\"get\": function(req) {\n		(new HttpError(405, 'Endpoint not configured')).send(req);\n	}\n	\n});\n"}function l(){return"\n$ dagger create model person --fields name,email\n"}function m(){return"\nvar models = require('dagger.js/lib/models');\n\n\n// \n// Define the Person schema\n// \n// There is no need to create the actual model here (eg. `mongoose.model('Person', PersonSchema)`)\n// as that is handled automatically by dagger's model module.\n// \nvar PersonSchema = module.exports = new models.Schema({\n	name: { type: String },\n	email: { type: String }\n});\n"}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,a.helpers),e=e||{};var n,o,p,q="",r=this,s=c.helperMissing;return q+='<h2>Install</h2>\n<p>\n	Dagger has a <abbr title="Command Line Interface">CLI</abbr> scaffolding tool to help you create and build\n	your projects which can be found in the <abbr title="Node Package Manager">NPM</abbr> repository.\n</p>\n\n',p={hash:{},inverse:r.noop,fn:r.program(1,f,e),data:e},n=c.highlight||b&&b.highlight,o=n?n.call(b,"bash",p):s.call(b,"highlight","bash",p),(o||0===o)&&(q+=o),q+="\n\n<p>\n	If you don't want to use the scaffolding tool, you can also install Dagger directly in your project directory, but\n	it is highly recommended to use the scaffolding tool.\n</p>\n\n",p={hash:{},inverse:r.noop,fn:r.program(3,g,e),data:e},n=c.highlight||b&&b.highlight,o=n?n.call(b,"bash",p):s.call(b,"highlight","bash",p),(o||0===o)&&(q+=o),q+="\n\n<h3>Using The Scaffolding Tool</h3>\n<p>\n	Using the scaffolding tool is very easy and straight-forward. To begin with, you will need a directory to\n	work in.\n</p>\n\n",p={hash:{},inverse:r.noop,fn:r.program(5,h,e),data:e},n=c.highlight||b&&b.highlight,o=n?n.call(b,"bash",p):s.call(b,"highlight","bash",p),(o||0===o)&&(q+=o),q+="\n\n<p>\n	From here, we can use the scaffold to initialize all of the basics of a Dagger application.\n</p>\n\n",p={hash:{},inverse:r.noop,fn:r.program(7,i,e),data:e},n=c.highlight||b&&b.highlight,o=n?n.call(b,"bash",p):s.call(b,"highlight","bash",p),(o||0===o)&&(q+=o),q+="\n\n<p>\n	The <code>init</code> command tells the tool to create all the basic directories and files needed for\n	a Dagger application, such as the <code>package.json</code> file, the main <code>app.js</code> file,\n	and the <code>models</code> and <code>endpoints</code> directories. Adding the <code>--deps</code>\n	flag tells it to also call to npm to install the project dependencies. Now we can create our first endpoint.\n</p>\n\n",p={hash:{},inverse:r.noop,fn:r.program(9,j,e),data:e},n=c.highlight||b&&b.highlight,o=n?n.call(b,"bash",p):s.call(b,"highlight","bash",p),(o||0===o)&&(q+=o),q+="\n\n<p>\n	This will create a new file <code>endpoints/hello.js</code> with a basic endpoint that responds to the\n	<code>GET</code> method. It should look something like this:\n</p>\n\n",p={hash:{},inverse:r.noop,fn:r.program(11,k,e),data:e},n=c.highlight||b&&b.highlight,o=n?n.call(b,"javascript",p):s.call(b,"highlight","javascript",p),(o||0===o)&&(q+=o),q+="\n\n<h4>Creating Models</h4>\n<p>\n	Now, let's create a model and an endpoint to access that model.\n</p>\n\n",p={hash:{},inverse:r.noop,fn:r.program(13,l,e),data:e},n=c.highlight||b&&b.highlight,o=n?n.call(b,"bash",p):s.call(b,"highlight","bash",p),(o||0===o)&&(q+=o),q+="\n\n<p>\n	This will result in the file <code>models/person.js</code> that looks something like this:\n</p>\n\n",p={hash:{},inverse:r.noop,fn:r.program(15,m,e),data:e},n=c.highlight||b&&b.highlight,o=n?n.call(b,"javascript",p):s.call(b,"highlight","javascript",p),(o||0===o)&&(q+=o),q+="\n\n\n\n\n\n\n\n\n\n\n"}),this.exports.header=b.template(function(a,b,c,d,e){return this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,a.helpers),e=e||{},'<header>\n	<h1><a href="/#welcome">Dagger.js</a></h1>\n	<p>\n		A Node.js REST API framework with built-in websocket support\n	</p>\n</header>\n<nav>\n	<a href="/#intro">Intro</a>\n	<a href="/#get-started">Getting Started</a>\n	<a href="/#examples">Examples</a>\n	<a href="/#docs">Documentation</a>\n</nav>'}),this.exports.intro=b.template(function(a,b,c,d,e){function f(){return"\nvar models = require('dagger.js/lib/models');\n\nvar ObjectId  = models.types.ObjectId;\n\n//\n// Define a new Person schema\n//\nvar PersonSchema = module.exports = new models.Schema({\n	name: String,\n	email: {type: String, index: {unique: true}},\n	gender: {type: String, enum: ['male', 'female', 'other', 'undisclosed']},\n	children: [{type: ObjectId, ref: 'person'}]\n});\n\n//\n// Add a new method to our model\n//\nPersonSchema.methods.sendEmail = function(opts) {\n	sendEmail(this.email, opts);\n};\n"}function g(){return"\nvar Endpoint = require('dagger.js/lib/endpoint');\n\n//\n// Define the new endpoint\n//\nvar PeopleEndpoint = module.exports = new Endpoint({\n\n	route: '/people',\n\n	//\n	// GET /people\n	//\n	'get': function(req) {\n		req.respond(200, 'Hello World!');\n	},\n\n	//\n	// GET /people/:id\n	//\n	'get /:id': function(req) {\n		req.respond(200, 'You attempted to fetch ' + req.params.id);\n	},\n\n	//\n	// POST /people\n	//\n	'post': function(req) {\n		req.respond(405, 'We don\\'t support POSTs on this endpoint');\n	},\n\n	//\n	// PUT /people/:id\n	// PATCH /people/:id\n	//\n	'put|patch /:id': function(req) {\n		req.respond(200, 'We handle PUT and PATCH requests with the same code');\n	},\n\n	//\n	// DELETE /people\n	//\n	'delete': function(req) {\n		req.respond(200, 'No! D: Don\\'t delete me! :(');\n	}\n\n});\n"}function h(){return'\n$ dagger create endpoint people for person\nCreating new endpoint "people" for model "person"... Done.\n'}function i(){return"\nGET http://example.com/people/schema HTTP/1.1\n"}function j(){return'\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n	"_id": {\n		"type": "ObjectId",\n		"auto": true\n	},\n	"name": {\n		"type": "String"\n	},\n	"email": {\n		"type": "Email",\n		"unique": true\n	},\n	"gender": {\n		"type": "String",\n		"enum": ["male", "female", "other", "undisclosed"]\n	},\n	"children": {\n		"type": "[ObjectId]",\n		"ref": "person"\n	}\n}\n'}function k(){return'\nGET http://example.com/people?filter={"gender":"male"}&amp;populate=children HTTP/1.1\n'}function l(){return'\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[{\n	"_id": "...",\n	"name": "Bob",\n	"email": "bob@example.com",\n	"gender": "male",\n	"children": [{\n		"_id": "..."\n		"name": "Sally",\n		"email": "sally@example.com",\n		"gender": "female",\n		"children": []\n	}]\n}]\n'}function m(){return'\nPATCH http://example.com/people HTTP/1.1\nContent-Type: application/json\n\n[\n	{"_id":"...","name":"Bob"},\n	{"_id":"...","name":"Sally"}\n]\n'}function n(){return'\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[{\n	"_id": "...",\n	"name": "Bob",\n	"email": "bob@example.com",\n	"gender": "Male",\n	"children": ["..."]\n}, {\n	"_id": "...",\n	"name": "Sally",\n	"email": "sally@example.com",\n	"gender": "Female",\n	"children": []\n}]\n'}function o(){return"\nvar socket = io.connect('http://example.com');\n\nvar req = {\n	method: 'get',\n	url: '/people?filter={\"name\":\"Bob\"}'\n};\n\n// Using the socket.io client to make requests\nsocket.emit('request', req, function(res) {\n	var bob = res.body;\n});\n"}function p(){return"\nvar socket = io.connect('http://example.com');\n\nvar req = {\n	model: 'person',\n	event: 'create',\n	filter: {gender: 'female'}\n};\n\n// Set-up the listener on the server\nsocket.emit('listen', req, function(res) {\n	// Start listening for incoming events\n	socket.on(res.emits, function(person) {\n		console.log('A new person with gender \"female\" was created on the server.');\n	});\n});\n"}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,a.helpers),e=e||{};var q,r,s,t="",u=this,v=c.helperMissing;return t+='<p>\n	Dagger.js is a new RESTful API framework for Node.js packed full of power, built on top of known\n	and trusted libraries like <a href="http://expressjs.com">Express</a>, <a href="http://socket.io">\n	Socket.IO</a>, and <a href="http://mongoosejs.com/">Mongoose</a>.\n</p>\n\n\n\n<h2>Mongoose Models with Added Extras</h2>\n<p>\n	Dagger.js models use mongoose under the hood, but has extended it for ease of use and added\n	some extra features.\n</p>\n\n',s={hash:{},inverse:u.noop,fn:u.program(1,f,e),data:e},q=c.highlight||b&&b.highlight,r=q?q.call(b,"javascript",s):v.call(b,"highlight","javascript",s),(r||0===r)&&(t+=r),t+="\n\n\n\n<h2>Easy-to-use Endpoints</h2>\n<p>\n	The built-in endpoint class is very easy to use. You just create a new endpoint instance with a base route\n	and define methods/sub-routes.\n</p>\n\n",s={hash:{},inverse:u.noop,fn:u.program(3,g,e),data:e},q=c.highlight||b&&b.highlight,r=q?q.call(b,"javascript",s):v.call(b,"highlight","javascript",s),(r||0===r)&&(t+=r),t+='\n\n<p>\n	For basic model endpoints, you don\'t have to write most of this yourself, you can use the <abbr\n	title="Command Line Interface">CLI</abbr> scaffolding tool to create endpoints for your models\n	automatically. These auto-generated endpoints have a lot of built-in advantages.\n</p>\n\n',s={hash:{},inverse:u.noop,fn:u.program(5,h,e),data:e},q=c.highlight||b&&b.highlight,r=q?q.call(b,"bash",s):v.call(b,"highlight","bash",s),(r||0===r)&&(t+=r),t+="\n\n<h3>Schema Endpoints</h3>\n<p>\n	Auto-generated endpoints will automatically create schema endpoints for you models so your API will\n	document itself.\n</p>\n\n",s={hash:{},inverse:u.noop,fn:u.program(7,i,e),data:e},q=c.highlight||b&&b.highlight,r=q?q.call(b,"http",s):v.call(b,"highlight","http",s),(r||0===r)&&(t+=r),t+="\n\n",s={hash:{},inverse:u.noop,fn:u.program(9,j,e),data:e},q=c.highlight||b&&b.highlight,r=q?q.call(b,"http",s):v.call(b,"highlight","http",s),(r||0===r)&&(t+=r),t+="\n\n<h3>Filters and Populates</h3>\n<p>\n	You can pass in mongodb style filter queries to your model endpoints, as well as specifying fields to\n	be populated when querying.\n</p>\n\n",s={hash:{},inverse:u.noop,fn:u.program(11,k,e),data:e},q=c.highlight||b&&b.highlight,r=q?q.call(b,"http",s):v.call(b,"highlight","http",s),(r||0===r)&&(t+=r),t+="\n\n",s={hash:{},inverse:u.noop,fn:u.program(13,l,e),data:e},q=c.highlight||b&&b.highlight,r=q?q.call(b,"http",s):v.call(b,"highlight","http",s),(r||0===r)&&(t+=r),t+="\n\n<h3>Bulk Updates and Deletes</h3>\n<p>\n	Model endpoints also support bulk updates and deletes so you can design you code to be more efficient.\n</p>\n\n",s={hash:{},inverse:u.noop,fn:u.program(15,m,e),data:e},q=c.highlight||b&&b.highlight,r=q?q.call(b,"http",s):v.call(b,"highlight","http",s),(r||0===r)&&(t+=r),t+="\n\n",s={hash:{},inverse:u.noop,fn:u.program(17,n,e),data:e},q=c.highlight||b&&b.highlight,r=q?q.call(b,"http",s):v.call(b,"highlight","http",s),(r||0===r)&&(t+=r),t+="\n\n\n\n<h2>Socket.IO Out of the Box</h2>\n<p>\n	Socket.IO is deeply integrated into Dagger.js; Any request that you can make with a REST endpoint\n	can also be done through a websocket.\n</p>\n\n",s={hash:{},inverse:u.noop,fn:u.program(19,o,e),data:e},q=c.highlight||b&&b.highlight,r=q?q.call(b,"javascript",s):v.call(b,"highlight","javascript",s),(r||0===r)&&(t+=r),t+="\n\n<p>\n	You can also use Socket.IO to create push-based applications in Dagger.js by having the client listen\n	for events on specific models:\n</p>\n\n",s={hash:{},inverse:u.noop,fn:u.program(21,p,e),data:e},q=c.highlight||b&&b.highlight,r=q?q.call(b,"javascript",s):v.call(b,"highlight","javascript",s),(r||0===r)&&(t+=r),t+="\n"}),this.exports["not-found"]=b.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,a.helpers),e=e||{};var f="";return f}),this.exports.welcome=b.template(function(a,b,c,d,e){function f(){return"\nvar models = require('dagger.js/lib/models');\n\nvar Email     = models.types.Email;\nvar ObjectId  = models.types.ObjectId;\n\n//\n// Define a new Person schema\n//\nvar PersonSchema = module.exports = {\n	name: String,\n	email: {type: Email, index: {unique: true}},\n	gender: {type: String, enum: ['male', 'female', 'other', 'undisclosed']},\n	children: [{type: ObjectId, ref: 'person'}]\n};\n"}function g(){return"\nvar Endpoint = require('dagger.js/lib/endpoint');\n\n//\n// Define the new endpoint\n//\nvar PeopleEndpoint = module.exports = Endpoint.create({\n\n	route: '/people',\n\n	'get': function(req) {\n		req.respond(200, 'Hello World!');\n	},\n\n	'get /:id': function(req) {\n		req.respond(200, You attempted to fetch ' + req.params.id);\n	},\n\n	'post': function(req) {\n		req.respond(405, 'We don't support POSTs on this endpoint');\n	},\n\n	'put|patch': function(req) {\n		req.respond(200, 'We handle PUT and PATCH requests with the same code');\n	},\n\n	'del': function(req) {\n		req.respond(200, 'No! D: Don't delete me! :(');\n	}\n\n});\n"}function h(){return"\nGET http://example.com/people/schema HTTP/1.1\n"}function i(){return'\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n	"_id": {\n		"type": "ObjectId",\n		"auto": true\n	},\n	"name": {\n		"type": "String"\n	},\n	"email": {\n		"type": "Email",\n		"unique": true\n	},\n	"gender": {\n		"type": "String",\n		"enum": ["Male", "Female", "Other", "Undisclosed"]\n	},\n	"children": {\n		"type": "[ObjectId]",\n		"ref": "Person"\n	}\n}\n'}function j(){return'\nGET http://example.com/people?filter={"gender":"Male"}&amp;populate=children HTTP/1.1\n'}function k(){return'\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[{\n	"_id": "...",\n	"name": "Bob",\n	"email": "bob@example.com",\n	"gender": "Male",\n	"children": [{\n		"_id": "..."\n		"name": "Sally",\n		"email": "sally@example.com",\n		"gender": "Female",\n		"children": []\n	}]\n}]\n'}function l(){return'\nPATCH http://example.com/people HTTP/1.1\nContent-Type: application/json\n\n[\n	{"_id":"...","name":"Bob"},\n	{"_id":"...","name":"Sally"}\n]\n'}function m(){return'\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[{\n	"_id": "...",\n	"name": "Bob",\n	"email": "bob@example.com",\n	"gender": "Male",\n	"children": ["..."]\n}, {\n	"_id": "...",\n	"name": "Sally",\n	"email": "sally@example.com",\n	"gender": "Female",\n	"children": []\n}]\n'}function n(){return"\nvar socket = io.connect('http://example.com');\n\n// Using the socket.io client to make requests\nsocket.emit('request', {method: 'get', url: '/people?filter={\"name\":\"Bob\"}'}, function(res) {\n	var bob = res.body;\n});\n"}function o(){return"\nvar socket = io.connect('http://example.com');\n\n// Using socket.io client to listen for events on the server\nsocket.emit('listen', {model: 'person', event: 'create', filter: {gender: 'female'}}, function(res) {\n	socket.on(res.emits, function(person) {\n		console.log('A new person with gender \"female\" was created on the server.');\n	});\n});\n"}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,a.helpers),e=e||{};var p,q,r,s="",t=this,u=c.helperMissing;return s+='<p>\n	Dagger.js is a new RESTful API framework for Node.js packed full of power, built on top of known\n	and trusted libraries like <a href="http://expressjs.com">Express</a>, <a href="http://socket.io">\n	Socket.IO</a>, and <a href="http://mongoosejs.com/">Mongoose</a>.\n</p>\n\n\n\n<h2>Mongoose Models with Added Extras</h2>\n<p>\n	Dagger.js models use mongoose under the hood, but has extended it for ease of use and added\n	some extra features.\n</p>\n\n',r={hash:{},inverse:t.noop,fn:t.program(1,f,e),data:e},p=c.highlight||b&&b.highlight,q=p?p.call(b,"javascript",r):u.call(b,"highlight","javascript",r),(q||0===q)&&(s+=q),s+="\n\n\n\n<h2>Easy-to-use Endpoints</h2>\n<p>\n	The built-in endpoint class is very easy to use.\n</p>\n\n",r={hash:{},inverse:t.noop,fn:t.program(3,g,e),data:e},p=c.highlight||b&&b.highlight,q=p?p.call(b,"javascript",r):u.call(b,"highlight","javascript",r),(q||0===q)&&(s+=q),s+="\n\n<h3>Schema Endpoints</h3>\n<p>\n	Auto-generated endpoints will automatically create schema endpoints for you models so your API will\n	document itself.\n</p>\n\n",r={hash:{},inverse:t.noop,fn:t.program(5,h,e),data:e},p=c.highlight||b&&b.highlight,q=p?p.call(b,"http",r):u.call(b,"highlight","http",r),(q||0===q)&&(s+=q),s+="\n\n",r={hash:{},inverse:t.noop,fn:t.program(7,i,e),data:e},p=c.highlight||b&&b.highlight,q=p?p.call(b,"http",r):u.call(b,"highlight","http",r),(q||0===q)&&(s+=q),s+="\n\n<h3>Filters and Populates</h3>\n<p>\n	You can pass in mongodb style filter queries to your model endpoints, as well as specifying fields to\n	be populated when querying.\n</p>\n\n",r={hash:{},inverse:t.noop,fn:t.program(9,j,e),data:e},p=c.highlight||b&&b.highlight,q=p?p.call(b,"http",r):u.call(b,"highlight","http",r),(q||0===q)&&(s+=q),s+="\n\n",r={hash:{},inverse:t.noop,fn:t.program(11,k,e),data:e},p=c.highlight||b&&b.highlight,q=p?p.call(b,"http",r):u.call(b,"highlight","http",r),(q||0===q)&&(s+=q),s+="\n\n<h3>Bulk Updates and Deletes</h3>\n<p>\n	Model endpoints also support bulk updates and deletes so you can design you code to be more efficient.\n</p>\n\n",r={hash:{},inverse:t.noop,fn:t.program(13,l,e),data:e},p=c.highlight||b&&b.highlight,q=p?p.call(b,"http",r):u.call(b,"highlight","http",r),(q||0===q)&&(s+=q),s+="\n\n",r={hash:{},inverse:t.noop,fn:t.program(15,m,e),data:e},p=c.highlight||b&&b.highlight,q=p?p.call(b,"http",r):u.call(b,"highlight","http",r),(q||0===q)&&(s+=q),s+="\n\n\n\n<h2>Socket.IO Out of the Box</h2>\n<p>\n	Socket.IO is deeply integrated into Dagger.js; Any request that you can make with a REST endpoint\n	can also be done through a websocket.\n</p>\n\n",r={hash:{},inverse:t.noop,fn:t.program(17,n,e),data:e},p=c.highlight||b&&b.highlight,q=p?p.call(b,"javascript",r):u.call(b,"highlight","javascript",r),(q||0===q)&&(s+=q),s+="\n\n<p>\n	You can also use Socket.IO to create push-based applications in Dagger.js by having the client listen\n	for events on specific models:\n</p>\n\n",r={hash:{},inverse:t.noop,fn:t.program(19,o,e),data:e},p=c.highlight||b&&b.highlight,q=p?p.call(b,"javascript",r):u.call(b,"highlight","javascript",r),(q||0===q)&&(s+=q),s+="\n"}),"object"==typeof e&&e&&(c.exports=this.exports)};return c}(),require._modules["/views/_highlight.js"]=function(){var a="/views/_highlight.js",b="/views",c={loaded:!1,exports:{},filename:a,dirname:b,require:null,call:function(){c.loaded=!0,c.call=function(){},e()},parent:null,children:[]},d=c.require=window.require._bind(c),e=(c.exports,function(){function a(a,d){var e=b.Deferred();return d&&(a=d),a.innerHTML=a.innerHTML.replace(/^\s+/,"").replace(/\s+$/,""),c.highlightElement(a,!1,function(){e.resolve()}),e}var b=d("jquery"),c=d("prism"),e=d("cloak/view"),f=d("handlebars");e.prototype.highlight=function(c){return c?a(c):(c=this.$elem.find("code[class*=language-]"),b.when.apply(b,c.map(a)))},f.registerHelper("highlight",function(a,b){for(var c=b.fn(this);c.indexOf("<")>=0;)c=c.replace("<","&lt;");return'<pre><code class="language-'+a+'">'+c+"</code></pre>"})});return c}(),require._modules["/views/footer.js"]=function(){var a="/views/footer.js",b="/views",c={loaded:!1,exports:{},filename:a,dirname:b,require:null,call:function(){c.loaded=!0,c.call=function(){},e()},parent:null,children:[]},d=c.require=window.require._bind(c),e=(c.exports,function(){{var a=d("jquery"),b=d("templates"),e=d("cloak/view");c.exports=e.extend({template:b.footer,initialize:function(){this.$elem=a("#footer")},draw:function(){this.$elem.html(this.render({year:(new Date).getFullYear()}))}})}});return c}(),require._modules["/views/get-started.js"]=function(){var a="/views/get-started.js",b="/views",c={loaded:!1,exports:{},filename:a,dirname:b,require:null,call:function(){c.loaded=!0,c.call=function(){},e()},parent:null,children:[]},d=c.require=window.require._bind(c),e=(c.exports,function(){var a=d("templates"),b=d("cloak/view");d("./_highlight");c.exports=b.extend({className:"get-started",template:a["get-started"],events:{},initialize:function(){},draw:function(){this.$elem.html(this.render()),this.bindEvents(),this.highlight()}})});return c}(),require._modules["/views/header.js"]=function(){var a="/views/header.js",b="/views",c={loaded:!1,exports:{},filename:a,dirname:b,require:null,call:function(){c.loaded=!0,c.call=function(){},e()},parent:null,children:[]},d=c.require=window.require._bind(c),e=(c.exports,function(){{var a=d("jquery"),b=d("templates"),e=d("cloak/view");c.exports=e.extend({template:b.header,initialize:function(){this.$elem=a("#header")},draw:function(){this.$elem.html(this.render())}})}});return c}(),require._modules["/views/intro.js"]=function(){var a="/views/intro.js",b="/views",c={loaded:!1,exports:{},filename:a,dirname:b,require:null,call:function(){c.loaded=!0,c.call=function(){},e()},parent:null,children:[]},d=c.require=window.require._bind(c),e=(c.exports,function(){var a=d("templates"),b=d("cloak/view");d("./_highlight");c.exports=b.extend({className:"intro",template:a.intro,events:{},initialize:function(){},draw:function(){this.$elem.html(this.render()),this.bindEvents(),this.highlight()}})});return c}(),require._modules["/views/not-found.js"]=function(){var a="/views/not-found.js",b="/views",c={loaded:!1,exports:{},filename:a,dirname:b,require:null,call:function(){c.loaded=!0,c.call=function(){},e()},parent:null,children:[]},d=c.require=window.require._bind(c),e=(c.exports,function(){{var a=d("templates"),b=d("cloak/view");c.exports=b.extend({className:"404 center-panel",template:a["not-found"],draw:function(){this.$elem.html(this.render({isLoggedIn:!!cloak.auth.user}))}})}});return c}(),require._modules["/views/spinner.js"]=function(){var a="/views/spinner.js",b="/views",c={loaded:!1,exports:{},filename:a,dirname:b,require:null,call:function(){c.loaded=!0,c.call=function(){},e()},parent:null,children:[]},d=c.require=window.require._bind(c),e=(c.exports,function(){var a=d("jquery"),b=d("cloak/view");d("jquery.spin");c.exports=b.extend({initialize:function(b,c,d){b&&(b instanceof a||(b=$(b)),this.$elem=b),"object"==typeof c&&c?this.opts=c:(this.preset=c,this.color=d)},drawn:!1,draw:function(a,b){this.drawn||(this.spinner=this.$elem.spin(a||this.opts||this.preset,b||this.color),this.drawn=!0)},undraw:function(){this.spinner&&this.drawn&&(this.spinner.stop(),this.drawn=!1)}})});return c}(),require._modules["/routers/main.js"]=function(){var a="/routers/main.js",b="/routers",c={loaded:!1,exports:{},filename:a,dirname:b,require:null,call:function(){c.loaded=!0,c.call=function(){},e()},parent:null,children:[]},d=c.require=window.require._bind(c),e=(c.exports,function(){{var a=d("jquery"),b=(d("cloak"),d("cloak/router")),e=d("views/intro"),f=d("views/header"),g=d("views/footer"),h=d("views/get-started");c.exports=b.extend({routes:{"/":"intro","/intro":"intro","/get-started":"getStarted","/example":"example","/docs":"docs"},initialize:function(){this.$content=a("#content"),this.bind("notfound"),this.on("notfound",this.notfound),a("#wrapper").on("click",'a[href^="#"], a[href^="/#"]',this.handleAnchor),(new f).draw(),(new g).draw()},intro:function(){this.drawViewToContent(new e)},getStarted:function(){this.drawViewToContent(new h)},example:function(){this.drawViewToContent(new ExampleView)},docs:function(){this.drawViewToContent(new DocsView)},notfound:function(){this.drawViewToContent(new NotFoundView)},drawViewToContent:function(a,b){var c=this.$content;c.animate({opacity:0},600,function(){c.html(""),a.draw(),a.$elem.appendTo(c),c.animate({opacity:100},600,function(){b&&b()})})}})}});return c}();