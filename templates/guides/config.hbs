<div class="row content">
	<h2>Configuring Your App</h2>

	<div class="row">
		<div class="small-12 columns">
			<p>
				When you create a new dagger project, you have a <code>config</code> directory pre-populated with a single file,
				<code>master.js</code>. This file contains all of the configurable setting for a dagger app with their default
				values. To use dagger in its simplest form, you can modify the values in this file. However, it will likely be
				more useful to set up multiple environments for your app to run in. Every file you create in the <code>config</code>
				directory (other than the <code>master.js</code> file) will automatically create a new environment for your app.
			</p>
		</div>
	</div>

	<div class="row">
		<div class="small-12 columns">
			<p>
				Let's say you want to set up two environments: one for development
				and one for production. First, you would create two new files in <code>config</code>: <code>development.js</code>
				and <code>production.js</code>. To start, they should look like this:
			</p>
		</div>
	</div>

	<div class="row">
		<div class="small-12 medium-10 medium-offset-1 columns">
			<div class="file">
				<h3>config/development.js</h3>
				{{#pre "javascript"}}
					module.exports = {
						//
					};
				{{/pre}}
			</div>
		</div>
	</div>

	<div class="row">
		<div class="small-12 columns">
			<p>
				Pretty simple. All environments inherit from the <code>master.js</code> file, so any values that are shared between
				environments can be defined there without worrying about the individual environment files. All that needs to be in
				those files are the config values that are specific to that one environment.
			</p>
		</div>
	</div>

	<div class="row">
		<div class="small-12 medium-6 medium-push-6 columns">
			<p>
				You can change which environment you app is running in by setting the <code>NODE_ENV</code> environment variable
				when starting your application.
			</p>
		</div>
		<div class="small-12 medium-6 medium-pull-6 columns">
			{{#pre "bash"}}
				$ NODE_ENV=development node app.js
			{{/pre}}
		</div>
	</div>

	<h3>Custom Config</h3>

	<div class="row">
		<div class="small-12 columns">
			<p>
				In addition to the built-in dagger configuration values, you can define and reference your own config values as well.
				For example, let's say you define a value in your config file like this:
			</p>
		</div>
	</div>

	<div class="row">
		<div class="small-12 medium-10 medium-offset-1 columns">
			{{#pre "javascript"}}
				module.exports = {
					
					foo: {
						bar: "some value"
					}

				};
			{{/pre}}
		</div>
	</div>

	<div class="row">
		<div class="small-12 columns">
			<p>
				You can then reference the config value in your application code by loading the dagger config module:
			</p>
		</div>
	</div>

	<div class="row">
		<div class="small-12 medium-10 medium-offset-1 columns">
			{{#pre "javascript"}}
				var config = require('dagger.js/lib/config');

				// "some value"
				var fooBar = config.foo.bar;
			{{/pre}}
		</div>
	</div>

	<hr />

	<div class="row">
		<div class="small-12 columns">
			<p>
				That's about all there is to it; Configuration is very simple with dagger so that you can just get to work and not have
				to fuss with setting up environments. For more info on the individual configuration values that go in your files, you
				can look at the <a href="/docs/config">configuration docs</a>.
			</p>
		</div>
	</div>
</div>