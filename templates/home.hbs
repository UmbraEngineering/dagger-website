<div class="row content">
	<p class="intro">
		Dagger is a <a href="http://nodejs.org">Node.js</a> RESTful API framework with built-in websocket support, built on top of
		well known and trusted tools like <a href="http://expressjs.com/">Express.js</a>, <a href="http://socket.io/">Socket.io</a>,
		and <a href="http://www.mongodb.org/">MongoDB</a> / <a href="http://mongoosejs.com/">Mongoose</a>. Designed for rapid yet
		versatile development, Dagger is a powerful new tool to add to your arsenal.
	</p>

	<h2>Getting Started</h2>

	<div class="row">
		<div class="small-12 medium-6 medium-push-6 columns">
			<p>
				First things first, install the Dagger CLI scaffolding tool from npm.
			</p>
		</div>
		<div class="small-12 medium-6 medium-pull-6 columns">
			{{#pre "bash"}}
				$ [sudo] npm install -g dagger-cli
			{{/pre}}
		</div>
	</div>

	<div class="row">
		<div class="small-12 medium-6 medium-push-6 columns">
			<p>
				Once the tool is installed, create a directory for your new project
			</p>
		</div>
		<div class="small-12 medium-6 medium-pull-6 columns">
			{{#pre "bash"}}
				$ mkdir your-project && cd your-project
			{{/pre}}
		</div>
	</div>

	<div class="row">
		<div class="small-12 medium-6 medium-push-6 columns">
			<p>
				Next, initialize your new dagger project!
			</p>
		</div>
		<div class="small-12 medium-6 medium-pull-6 columns">
			{{#pre "bash"}}
				$ dagger init --deps
			{{/pre}}
		</div>
	</div>

	<h2>Start Building</h2>

	<div class="row">
		<div class="small-12 medium-6 medium-push-6 columns">
			<p>
				Creating new models/endpoints in dagger in easy, as all new content creation can be done with the CLI tool.
				This creates a new file <code>endpoints/test.js</code> with a barebones dagger endpoint instance in it.
			</p>
		</div>
		<div class="small-12 medium-6 medium-pull-6 columns">
			{{#pre "bash"}}
				$ dagger create endpoint test
			{{/pre}}
		</div>
	</div>

	<div class="row">
		<div class="small-12 columns">
			<p>
				Dagger endpoints are designed to be very simple to use. You just create a new instance of the endpoint
				class, passing in a base <code>route</code> string (like <code>"/test"</code>) and then define how the route
				should handle various HTTP verbs and sub-routes.
			</p>
		</div>
	</div>

	<div class="row">
		<div class="small-12 medium-10 medium-offset-1 columns">
			<div class="file">
				<h3>endpoints/test.js</h3>
				{{#pre "javascript"}}
					var Endpoint   = require('dagger.js/lib/endpoint');
					var HttpError  = require('dagger.js/lib/http-meta').HttpError;

					var TestEndpoint = module.exports = new Endpoint({

						route: '/test',
						
						//
						// GET /test
						//
						"get": function(req) {
							(new HttpError(405, 'Endpoint not configured')).send(req);
						},
						
						//
						// POST /test
						//
						"post": function(req) {
							(new HttpError(405, 'Endpoint not configured')).send(req);
						},
						
						//
						// PUT|PATCH /test
						//
						"put|patch": function(req) {
							(new HttpError(405, 'Endpoint not configured')).send(req);
						},
						
						//
						// DELETE /test
						//
						"delete": function(req) {
							(new HttpError(405, 'Endpoint not configured')).send(req);
						}
						
					});
				{{/pre}}
			</div>
		</div>
	</div>

	<div class="row">
		<div class="small-12 columns">
			<p>
				By default, creating a new endpoint results in a file like the one above, with a blank function
				for each of the four <abbr title="Create, Read, Update, Destroy">CRUD</abbr> operations. You can
				remove any of these functions that you do not intend to use, or add new ones as needed (eg. to
				handle references to individual documents, you might add a <code>"get /:id"</code> method).
			</p>
		</div>
	</div>

	<div class="row">
		<div class="small-12 medium-6 medium-push-6 columns">
			<p>
				You can start up your new application server by running the <code>app.js</code> file.
			</p>
		</div>
		<div class="small-12 medium-6 medium-pull-6 columns">
			{{#pre "bash"}}
				$ node app.js
			{{/pre}}
		</div>
	</div>

	<h2>Models</h2>

	<div class="row">
		<div class="small-12 columns">
			<p>
				Dagger models are just mongoose models that have been extended and made a little easier to set up.
			</p>
		</div>
	</div>

	<div class="row">
		<div class="small-12 medium-6 medium-push-6 columns">
			<p>
				You can create a new model using the CLI tool. The resulting model file from this command will contain
				a mongoose schema with the fields <code>name</code>, <code>email</code>, and <code>age</code> defined.
			</p>
		</div>
		<div class="small-12 medium-6 medium-pull-6 columns">
			{{#pre "bash"}}
				$ dagger create model person --fields name,email,age:Number
			{{/pre}}
		</div>
	</div>

	<div class="row">
		<div class="small-12 medium-10 medium-offset-1 columns">
			<div class="file">
				<h3>models/person.js</h3>
				{{#pre "javascript"}}
					var models = require('dagger.js/lib/models');


					// 
					// Define the Person schema
					// 
					// There is no need to create the actual model here (eg. `mongoose.model('Person', PersonSchema)`)
					// as that is handled automatically by dagger's model module.
					// 
					var PersonSchema = module.exports = new models.Schema({
						name: { type: String },
						email: { type: String },
						age: { type: Number }
					});
				{{/pre}}
			</div>
		</div>
	</div>

	<div class="row">
		<div class="small-12 columns">
			<p>
				You can define methods and static functions on Dagger models the same way you would any mongoose model.
			</p>
		</div>
	</div>

	<div class="row">
		<div class="small-12 medium-10 medium-offset-1 columns">
			<div class="file">
				<h3>models/person.js</h3>
				{{#pre "javascript"}}
					var models = require('dagger.js/lib/models');


					// 
					// Define the Person schema
					// 
					// There is no need to create the actual model here (eg. `mongoose.model('Person', PersonSchema)`)
					// as that is handled automatically by dagger's model module.
					// 
					var PersonSchema = module.exports = new models.Schema({
						name: { type: String },
						email: { type: String },
						age: { type: Number }
					});

					//
					// An example of defining a static function
					//
					PersonSchema.statics.findByEmail = function(email, callback) {
						return this.find({ email: email }, callback);
					};

					//
					// An example of defining a model method
					//
					PersonSchema.methods.makeOlder = function(callback) {
						this.age++;
						this.save(callback);
					};
				{{/pre}}
			</div>
		</div>
	</div>

	<div class="row">
		<div class="small-12 columns">
			<p>
				For more help getting started, you can take a look at the <a href="/guides" data-local="true">guides</a> or
				the <a href="/docs" data-local="true">documentation</a>.
			</p>
		</div>
	</div>
</div>
